---
description: Markdown 文件编写规范
globs: *.md
alwaysApply: false
---

# Markdown文档规范

## 通用要求
- 所有文档使用Markdown格式
- 使用简洁、清晰的语言
- 文档内容应保持最新
- 避免拼写和语法错误
- 使用中文作为主要语言,技术术语保持英文，便于理解。

## 目录结构
- `README.md`：项目根目录，提供项目概述
- `docs/`：存放详细文档
  - `guide/`：使用指南
  - `api/`：API文档
  - `examples/`：示例代码文档

## README.md 内容规范
- 项目名称和简短描述
- 技术栈说明
- 项目结构说明
- 使用说明
- 许可证信息

## 版本记录规范
- 使用 `CHANGELOG.md` 记录版本变更
- 遵循语义化版本（Semantic Versioning）规范
- 每个版本应包含：新增功能、修复问题、破坏性变更

## 文档内容组织
- 从整体到局部，从简单到复杂
- 重要信息放在前面
- 相关内容应当放在一起
- 使用小标题和列表增强可读性
- 避免过长段落，保持内容简洁

## 代码示例规范
- 提供完整可运行的示例
- 代码应当简洁且易于理解
- 添加适当的注释解释关键部分
- 说明代码的预期输出或行为
- 更新示例以匹配最新API

## Markdown 格式规范
- **标题层级**：使用 `#` 到 `######` 表示标题层级
- **代码块**：使用 ``` 包围代码块，指定语言
- **行内代码**：使用 ` 包围行内代码
- **列表**：使用 `-` 或 `*` 表示无序列表，`1.` 表示有序列表
- **链接**：使用 `[文本](URL)` 格式
- **图片**：使用 `!alt文本](图片URL)` 格式
- **表格**：使用 `|` 分隔列，`-` 分隔表头

## API 文档规范
- **接口描述**：清晰描述接口功能和用途
- **请求参数**：详细说明参数类型、是否必填、示例值
- **响应格式**：说明响应状态码和数据结构
- **错误处理**：列出可能的错误码和错误信息
- **示例请求**：提供完整的请求示例

## 技术文档规范
- **架构文档**：系统架构图、组件关系图
- **部署文档**：环境要求、部署步骤、配置说明
- **运维文档**：监控指标、告警规则、故障处理
- **开发文档**：开发环境搭建、代码规范、测试指南

## 文档维护规范
- **定期更新**：随代码变更同步更新文档
- **版本控制**：文档与代码使用相同的版本控制
- **审查机制**：重要文档需要审查和批准
- **反馈收集**：收集用户反馈，持续改进文档质量
