# Java 语言规范（Java 8）

## Java 8 特性使用

- **Lambda 表达式**：简化函数式编程
  ```java
  List<String> names = users.stream()
      .map(User::getName)
      .filter(name -> name != null && !name.isEmpty())
      .collect(Collectors.toList());
  ```

- **Stream API**：函数式数据处理
  ```java
  // 过滤和转换
  List<String> activeUserNames = users.stream()
      .filter(user -> "ACTIVE".equals(user.getStatus()))
      .map(User::getName)
      .sorted()
      .collect(Collectors.toList());
  
  // 分组操作
  Map<String, List<User>> usersByStatus = users.stream()
      .collect(Collectors.groupingBy(User::getStatus));
  ```

- **Optional**：避免空指针异常
  ```java
  Optional.ofNullable(user)
      .map(User::getName)
      .orElse("Unknown");
  
  // 链式调用
  Optional.ofNullable(user)
      .map(User::getEmail)
      .filter(email -> email.contains("@"))
      .orElseThrow(() -> new IllegalArgumentException("Invalid email"));
  ```

- **默认方法**：接口中的默认实现
  ```java
  public interface UserService {
      User findById(Long id);
      
      default User findByIdOrThrow(Long id) {
          return Optional.ofNullable(findById(id))
              .orElseThrow(() -> new UserNotFoundException("User not found: " + id));
      }
  }
  ```

- **方法引用**：简化 Lambda 表达式
  ```java
  // 静态方法引用
  users.stream().map(User::getName).collect(Collectors.toList());
  
  // 构造函数引用
  users.stream().map(User::new).collect(Collectors.toList());
  ```

- **新的日期时间 API**：使用 `java.time` 包
  ```java
  LocalDateTime now = LocalDateTime.now();
  LocalDate today = LocalDate.now();
  LocalTime time = LocalTime.now();
  
  // 日期计算
  LocalDate tomorrow = today.plusDays(1);
  LocalDateTime nextWeek = now.plusWeeks(1);
  ```

## Java 命名约定
- **类名**：使用帕斯卡命名法（如 `UserController`、`OrderService`）
- **方法和变量名**：使用驼峰命名法（如 `findUserById`、`isOrderValid`）
- **常量**：使用全大写下划线分隔（如 `MAX_RETRY_ATTEMPTS`、`DEFAULT_PAGE_SIZE`）
- **包名**：使用小写，按功能模块划分（如 `com.example.user.domain`）
- **接口名**：使用形容词或名词，如 `Comparable`、`Runnable`
- **枚举名**：使用单数形式，如 `OrderStatus`、`UserRole`

## Java 代码风格
- **缩进**：使用4个空格，不使用Tab
- **行长度**：每行不超过120字符
- **大括号**：使用Egyptian风格（开括号不换行）
- **空行**：方法间使用一个空行分隔，逻辑块间使用空行分隔
- **导入**：按标准库、第三方库、本地模块顺序导入
- **注释**：使用 `//` 进行行注释，`/* */` 进行块注释

## Java 异常处理
- **检查异常**：谨慎使用检查异常，优先使用运行时异常
- **异常链**：保持异常链，不丢失原始异常信息
  ```java
  try {
      // 可能抛出异常的代码
  } catch (SpecificException e) {
      throw new BusinessException("业务处理失败", e);
  }
  ```

- **资源管理**：使用try-with-resources自动管理资源
  ```java
  try (BufferedReader reader = Files.newBufferedReader(path)) {
      // 使用reader
  }
  ```

- **异常声明**：只在必要时声明检查异常
- **自定义异常**：继承 `RuntimeException` 创建业务异常

## Java 集合和流处理
- **集合选择**：根据使用场景选择合适的集合类型
  - `ArrayList`：随机访问频繁
  - `LinkedList`：插入删除频繁
  - `HashMap`：键值对存储
  - `TreeMap`：需要排序的键值对
  - `ConcurrentHashMap`：线程安全的HashMap

- **Stream API**：充分利用Stream API进行函数式编程
  ```java
  // 基本操作
  List<String> activeUserNames = users.stream()
      .filter(user -> "ACTIVE".equals(user.getStatus()))
      .map(User::getName)
      .sorted()
      .collect(Collectors.toList());
  
  // 聚合操作
  double averageAge = users.stream()
      .mapToInt(User::getAge)
      .average()
      .orElse(0.0);
  
  // 分组和分区
  Map<String, List<User>> usersByStatus = users.stream()
      .collect(Collectors.groupingBy(User::getStatus));
  
  Map<Boolean, List<User>> activeInactiveUsers = users.stream()
      .collect(Collectors.partitioningBy(user -> "ACTIVE".equals(user.getStatus())));
  ```

- **Optional**：避免空指针异常
  ```java
  Optional.ofNullable(user)
      .map(User::getName)
      .orElse("Unknown");
  
  // 链式调用
  Optional.ofNullable(user)
      .map(User::getEmail)
      .filter(email -> email.contains("@"))
      .orElseThrow(() -> new IllegalArgumentException("Invalid email"));
  ```

## Java 并发编程
- **线程安全**：优先使用不可变对象和线程安全的集合
- **锁机制**：合理使用synchronized、ReentrantLock等锁机制
- **并发集合**：使用ConcurrentHashMap、CopyOnWriteArrayList等并发集合
- **CompletableFuture**：使用CompletableFuture处理异步操作
  ```java
  CompletableFuture<String> future = CompletableFuture
      .supplyAsync(() -> fetchData())
      .thenApply(data -> processData(data))
      .exceptionally(throwable -> "默认值");
  
  // 组合多个异步操作
  CompletableFuture<String> future1 = CompletableFuture.supplyAsync(() -> "Hello");
  CompletableFuture<String> future2 = CompletableFuture.supplyAsync(() -> "World");
  
  CompletableFuture<String> combined = future1
      .thenCombine(future2, (s1, s2) -> s1 + " " + s2);
  ```

- **线程池**：使用Executors创建线程池，避免直接创建线程
- **原子类**：使用AtomicInteger、AtomicReference等原子类

## Java 内存管理
- **对象创建**：避免在循环中创建不必要的对象
- **字符串处理**：大量字符串操作使用StringBuilder
- **集合大小**：预估集合大小，避免频繁扩容
- **弱引用**：适当使用WeakReference避免内存泄漏
- **垃圾回收**：理解GC机制，合理设置堆内存大小

## Java 泛型使用
- **类型安全**：充分利用泛型提供类型安全
- **通配符**：正确使用上界通配符（? extends）和下界通配符（? super）
- **类型擦除**：理解泛型类型擦除的限制
  ```java
  public <T extends Comparable<T>> T findMax(List<T> list) {
      return list.stream().max(Comparable::compareTo).orElse(null);
  }
  ```

- **泛型约束**：使用extends和super约束泛型类型

## Java 注解使用
- **标准注解**：正确使用@Override、@Deprecated、@SuppressWarnings等
- **自定义注解**：合理创建自定义注解简化代码
- **注解处理**：了解编译时和运行时注解处理
- **元注解**：使用@Target、@Retention等元注解

## Java 测试规范
- **单元测试**：使用JUnit 4编写单元测试
- **测试命名**：测试方法使用描述性命名（如 `shouldReturnUserWhenValidIdProvided`）
- **断言**：使用AssertJ提供更好的断言体验
  ```java
  @Test
  public void shouldCalculateCorrectTotal() {
      // Given
      List<Item> items = Arrays.asList(
          new Item("item1", 10.0),
          new Item("item2", 20.0)
      );

      // When
      double total = calculator.calculateTotal(items);

      // Then
      assertThat(total).isEqualTo(30.0);
  }
  ```

- **Mock测试**：使用Mockito进行Mock测试
- **测试数据**：使用@Before、@After管理测试数据

## Java 性能优化
- **算法复杂度**：选择合适的算法和数据结构
- **缓存策略**：合理使用缓存减少重复计算
- **懒加载**：对于昂贵的操作使用懒加载
- **批量处理**：批量处理数据库操作和网络请求
- **JVM调优**：合理设置JVM参数

## Java 文档和注释
- **JavaDoc**：为公共API编写完整的JavaDoc
- **代码注释**：为复杂逻辑添加解释性注释
- **TODO标记**：使用TODO标记待完成的工作
  ```java
  /**
   * 计算用户积分
   *
   * @param userId 用户ID
   * @param actions 用户行为列表
   * @return 计算得出的积分值
   * @throws UserNotFoundException 当用户不存在时抛出
   */
  public int calculatePoints(Long userId, List<UserAction> actions) {
      // TODO: 实现积分计算逻辑
      return 0;
  }
  ```

## Java 8 特有最佳实践

### 函数式接口使用
- **内置函数式接口**：优先使用 `Function`、`Predicate`、`Consumer`、`Supplier`
- **自定义函数式接口**：使用 `@FunctionalInterface` 注解
  ```java
  @FunctionalInterface
  public interface UserValidator {
      boolean isValid(User user);
  }
  ```

### Stream API 最佳实践
- **避免副作用**：Stream 操作应该是无副作用的
- **短路操作**：使用 `findFirst`、`anyMatch` 等短路操作提高性能
- **并行流**：谨慎使用 `parallelStream()`，确保线程安全

### Optional 最佳实践
- **避免嵌套**：避免 Optional 的嵌套使用
- **默认值**：合理使用 `orElse`、`orElseGet`、`orElseThrow`
- **链式调用**：充分利用 Optional 的链式调用特性
description:
globs:
alwaysApply: false
---
