---
description: 核心开发规范
globs:
alwaysApply: true
---
# 核心开发规范

## 通用开发原则

### 1. 可测试性 (Testability)
- **原则**: 代码必须是可被验证和易于测试的。
- **实践**:
    - **单一职责**: 每个类或函数只负责一个明确的功能。
    - **依赖注入**: 通过构造函数或方法参数注入依赖，而不是在内部创建，以降低耦合度。
    - **面向接口**: 依赖于抽象接口而非具体实现，便于使用 Mock 或 Stub 进行测试。

### 2. 代码简洁 (Clean Code)
- **原则**: 代码应简洁、清晰、易于理解和维护。
- **实践**:
    - **DRY (Don't Repeat Yourself)**: 避免在系统中出现重复的逻辑。提取公共逻辑到可复用的函数、类或模块中。
    - **SOLID 原则**:
        - **S**: 单一职责原则 (Single Responsibility)
        - **O**: 开闭原则 (Open/Closed)
        - **L**: 里氏替换原则 (Liskov Substitution)
        - **I**: 接口隔离原则 (Interface Segregation)
        - **D**: 依赖倒置原则 (Dependency Inversion)
    - **KISS (Keep It Simple, Stupid)**: 保持解决方案的简单性，避免不必要的复杂性和过度设计。
    - **YAGNI (You Ain't Gonna Need It)**: 只实现当前真正需要的功能，避免对未来需求的过度预测和提前实现。
    - **OWASP 安全**: 遵循 [OWASP](https://owasp.org/) 的安全编码实践，从源头避免引入安全漏洞。

### 3. 命名规范 (Naming Conventions)
- **原则**: 命名需清晰、表意准确，并遵循各语言社区的公认约定。

### 4. 注释文档 (Documentation)
- **原则**: 复杂的、非直观的业务逻辑或算法添加必要的注释
- **实践**:
    - **代码注释**: 为复杂的、非直观的业务逻辑或算法添加必要的注释，解释“为什么”这么做，而不是“做了什么”。

### 5. 风格一致 (Code Style)
- **原则**: 遵循项目或语言的官方风格指南和代码约定

### 6. 利用生态 (Ecosystem)
- **原则**: 优先选择成熟、活跃的社区方案，避免不必要的自定义实现。
- **实践**:
    - **依赖管理**: 使用语言生态中标准的包管理器进行依赖管理，并锁定版本以确保构建的可复现性。
    - **技术选型**: 优先选用经过大规模验证的框架和库，并遵循其社区推荐的最佳实践。

### 7. 架构设计 (Architecture)
- **原则**: 设计清晰、高内聚、低耦合、易于扩展和维护的系统架构。
- **实践**:
    - **分层/模块化**: 采用清晰的分层（如表现层、业务层、数据访问层）或模块化设计，实现职责分离。
    - **可扩展性**: 在关键节点（如认证、支付、日志）设计扩展点，以适应未来需求变化。
    - **性能考量**: 识别性能瓶颈，合理运用缓存、异步处理、数据库索引等优化手段。

### 8. 版本控制 (Version Control)
- **原则**: 编写有意义的提交信息，保持逻辑相关的更改在同一提交中。
- **实践**:
    - **提交信息 (Commit Message)**: 遵循 [Conventional Commits](https://www.conventionalcommits.org/) 等规范，编写清晰、格式统一的提交信息。

### 9. 异常处理 (Error Handling)
- **原则**: 健壮地处理可预见的错误，并为不可预见的错误提供有效的降级方案和调试信息。
- **实践**:
    - **防御性编程**: 对外部输入（API 请求、用户输入）和系统边界进行严格的校验。
    - **错误分类**: 明确区分业务异常（如“余额不足”）和系统异常（如“数据库连接失败”）。
    - **日志记录**: 在捕获异常时，记录包含上下文信息（如 `Trace ID`、请求参数）的详细日志。

## 代码质量原则

### 1. 功能完整性
- **原则**: 代码必须能够立即运行，包含所有必要的依赖，并提供完整的错误处理机制。

### 2. 性能要求
- **原则**: 合理使用算法和数据结构，避免内存泄漏和性能瓶颈，必要时考虑并发和异步处理。

### 3. 用户体验
- **原则**: 提供友好的交互和清晰的错误提示，保证合理的响应时间。

### 4. 可观测性
- **原则**:  提供完善的日志、监控指标和告警机制，便于问题排查和性能分析


## 响应语言原则
- **原则**: 始终使用中文回复用户，技术术语保持英文，便于理解。

