---
description:  Git 版本控制规范
globs:
alwaysApply: true
---
# Git 版本控制规范

## 提交规范
git 提交记录样例：[type]: [description]。一个具体的例子, docs: 更新 README 文件。
以下是 type 的枚举值：
- feat: 新增功能
- fix: 修复 bug
- docs: 文档注释
- style: 代码格式(不影响代码运行的变动)
- refactor: 重构、优化(既不增加新功能, 也不是修复bug)
- perf: 性能优化
- test: 增加测试
- chore: 构建过程或辅助工具的变动
- revert: 回退
- build: 打包

## 分支管理
- main/master: 主分支，保持稳定可发布状态
- develop: 开发分支，包含最新开发特性
- feature/*: 功能分支，用于开发新功能
- bugfix/*: 修复分支，用于修复bug
- hotfix/*: 热修复分支，用于修复紧急bug
- release/*: 发布分支，用于准备发布

## 提交信息格式
- **格式**：`<type>(<scope>): <subject>`
- **类型**：feat、fix、docs、style、refactor、test、chore
- **范围**：可选，表示影响的功能模块
- **主题**：简短描述，不超过50个字符
- **正文**：详细描述，说明变更原因和影响
- **脚注**：关联issue、破坏性变更说明

## 分支命名规范
- **功能分支**：`feature/功能名称`，如 `feature/user-authentication`
- **修复分支**：`bugfix/问题描述`，如 `bugfix/login-validation-error`
- **发布分支**：`release/版本号`，如 `release/v1.2`
- **热修复分支**：`hotfix/问题描述`，如 `hotfix/security-vulnerability`

## 代码审查规范
- **审查范围**：所有合并到主分支的代码必须经过审查
- **审查重点**：功能正确性、代码质量、安全性、性能影响

## 版本标签规范
- **标签格式**：`v主版本.次版本.修订版本`，如 `v1.23`
- **标签类型**：
  - 主版本：不兼容的API修改
  - 次版本：向下兼容的功能性新增
  - 修订版本：向下兼容的问题修正
- **标签信息**：包含版本说明、发布日期、变更日志

## 冲突解决规范
- **预防冲突**：及时同步主分支，避免长期分支
- **冲突处理**：优先使用合并工具，手动解决复杂冲突
- **冲突测试**：解决冲突后必须进行测试
- **冲突记录**：记录冲突原因，避免重复发生

## 重要原则
- 提交前确保代码通过所有测试
- 保持提交信息简洁明了，描述清楚变更内容
- 避免大型提交，尽量将变更分解为小的、相关的提交
